{"version":3,"file":"index.es.js","sources":["../src/components/ImageStage/utils/getTranslateOffsetsFromScale.js","../src/components/ImageStage/utils/imageIsOutOfBounds.js","../src/components/ImageStage/components/Image/index.js","../src/components/ImageStage/utils/useDoubleClick.js","../src/components/ImageStage/components/ImagePager/index.js","../src/components/ImageStage/utils/useWindowSize.js","../src/components/ImageStage/index.js","../src/components/PageContainer/index.js","../src/components/CreatePortal/index.js","../src/index.js"],"sourcesContent":["/**\n * Calculates the the translate(x,y) coordinates needed to zoom-in\n * to a point in an image.\n *\n * @param {ref} imageRef The image dom node used as a reference to calculate translate offsets\n * @param {number} scale The current transform scale of image\n * @param {number} pinchDelta The amount of change in the new transform scale\n * @param {array} touchOrigin The [x,y] coordinates of the zoom origin\n * @param {array} currentTranslate The current [x,y] translate values of image\n *\n * @returns {array} The next [x,y] translate values to apply to image\n */\nconst getTranslateOffsetsFromScale = ({\n    imageRef,\n    scale,\n    pinchDelta,\n    touchOrigin: [touchOriginX, touchOriginY],\n    currentTranslate: [translateX, translateY]\n}) => {\n    const {\n        top: imageTopLeftY,\n        left: imageTopLeftX,\n        width: imageWidth,\n        height: imageHeight\n    } = imageRef.current.getBoundingClientRect();\n\n    // Get the (x,y) touch position relative to image origin at the current scale\n    const imageCoordX = (touchOriginX - imageTopLeftX - imageWidth / 2) / scale;\n    const imageCoordY =\n        (touchOriginY - imageTopLeftY - imageHeight / 2) / scale;\n\n    // Calculate translateX/Y offset at the next scale to zoom to touch position\n    const newTranslateX = -imageCoordX * pinchDelta + translateX;\n    const newTranslateY = -imageCoordY * pinchDelta + translateY;\n\n    return [newTranslateX, newTranslateY];\n};\n\nexport default getTranslateOffsetsFromScale;\n","/**\n * Determines if the provided image is within the viewport\n *\n * @param {ref} imageRef The image dom node to measure against the viewport\n *\n * @returns {boolean} True if image needs to be resized to fit viewport, otherwise false\n */\nconst imageIsOutOfBounds = imageRef => {\n    const {\n        top: topLeftY,\n        left: topLeftX,\n        bottom: bottomRightY,\n        right: bottomRightX\n    } = imageRef.current.getBoundingClientRect();\n    const { innerHeight: windowHeight, innerWidth: windowWidth } = window;\n\n    if (\n        topLeftX > windowWidth * (1 / 2) ||\n        topLeftY > windowHeight * (1 / 2) ||\n        bottomRightX < windowWidth * (1 / 2) ||\n        bottomRightY < windowHeight * (1 / 2)\n    )\n        return true;\n\n    return false;\n};\n\nexport default imageIsOutOfBounds;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSpring, animated, to, config } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport styled from 'styled-components';\nimport {\n    useDoubleClick,\n    imageIsOutOfBounds,\n    getTranslateOffsetsFromScale\n} from '../../utils';\n\n/**\n * Animates pinch-zoom + panning on image using spring physics\n *\n * @param {string} src The source URL of this image\n * @param {string} alt The alt attribute for this image\n * @param {boolean} isCurrentImage True if this image is currently shown in pager, otherwise false\n * @param {function} setDisableDrag Function that can be called to disable dragging in the pager\n * @param {number} pagerHeight Fixed height of the image stage, used to restrict maximum height of images\n * @param {boolean} singleClickToZoom Overrides the default behavior of double clicking causing an image zoom to a single click\n * @param {boolean} pagerIsDragging Indicates parent ImagePager is in a state of dragging, if true click to zoom is disabled\n *\n * @see https://github.com/react-spring/react-use-gesture\n * @see https://github.com/react-spring/react-spring\n */\nconst Image = ({\n    src,\n    alt,\n    pagerHeight,\n    isCurrentImage,\n    setDisableDrag,\n    singleClickToZoom,\n    pagerIsDragging\n}) => {\n    const [isPanningImage, setIsPanningImage] = useState(false);\n    const imageRef = useRef();\n    const defaultImageTransform = () => ({\n        scale: 1,\n        translateX: 0,\n        translateY: 0,\n        config: { ...config.default, precision: 0.01 }\n    });\n\n    /**\n     * Animates scale and translate offsets of Image as they change in gestures\n     *\n     * @see https://www.react-spring.io/docs/hooks/use-spring\n     */\n    const [{ scale, translateX, translateY }, set] = useSpring(() => ({\n        ...defaultImageTransform(),\n        onFrame: f => {\n            if (f.scale < 1 || !f.pinching) set(defaultImageTransform);\n\n            // Prevent dragging image out of viewport\n            if (f.scale > 1 && imageIsOutOfBounds(imageRef))\n                set(defaultImageTransform());\n        },\n        // Enable dragging in ImagePager if image is at the default size\n        onRest: f => {\n            if (f.scale === 1) setDisableDrag(false);\n        }\n    }));\n\n    // Reset scale of this image when dragging to new image in ImagePager\n    useEffect(() => {\n        if (!isCurrentImage) set(defaultImageTransform);\n    });\n\n    /**\n     * Update Image scale and translate offsets during pinch/pan gestures\n     *\n     * @see https://github.com/react-spring/react-use-gesture#usegesture-hook-supporting-multiple-gestures-at-once\n     */\n    const bind = useGesture(\n        {\n            onPinch: ({\n                movement: [xMovement],\n                origin: [touchOriginX, touchOriginY],\n                event,\n                ctrlKey,\n                last,\n                cancel\n            }) => {\n                // Prevent ImagePager from registering isDragging\n                setDisableDrag(true);\n\n                // Disable click to zoom during pinch\n                if (xMovement && !isPanningImage) setIsPanningImage(true);\n\n                // Don't calculate new translate offsets on final frame\n                if (last) {\n                    cancel();\n                    return;\n                }\n\n                // Speed up pinch zoom when using mouse versus touch\n                const SCALE_FACTOR = ctrlKey ? 1000 : 250;\n                const pinchScale = scale.value + xMovement / SCALE_FACTOR;\n                const pinchDelta = pinchScale - scale.value;\n                const { clientX, clientY } = event;\n\n                // Calculate the amount of x, y translate offset needed to\n                // zoom-in to point as image scale grows\n                const [\n                    newTranslateX,\n                    newTranslateY\n                ] = getTranslateOffsetsFromScale({\n                    imageRef,\n                    scale: scale.value,\n                    pinchDelta,\n                    currentTranslate: [translateX.value, translateY.value],\n                    // Use the [x, y] coords of mouse if a trackpad or ctrl + wheel event\n                    // Otherwise use touch origin\n                    touchOrigin: ctrlKey\n                        ? [clientX, clientY]\n                        : [touchOriginX, touchOriginY]\n                });\n\n                // Restrict the amount of zoom between half and 3x image size\n                if (pinchScale < 0.5) set({ scale: 0.5, pinching: true });\n                else if (pinchScale > 3.0) set({ scale: 3.0, pinching: true });\n                else\n                    set({\n                        scale: pinchScale,\n                        translateX: newTranslateX,\n                        translateY: newTranslateY,\n                        pinching: true\n                    });\n            },\n            onPinchEnd: () => {\n                if (scale.value > 1) setDisableDrag(true);\n                else set(defaultImageTransform);\n                setIsPanningImage(false);\n            },\n            onDragEnd: () => setIsPanningImage(false),\n            onDrag: ({\n                movement: [xMovement, yMovement],\n                pinching,\n                event,\n                cancel,\n                first,\n                memo = { initialTranslateX: 0, initialTranslateY: 0 }\n            }) => {\n                // Disable click to zoom during drag\n                if (xMovement && yMovement && !isPanningImage)\n                    setIsPanningImage(true);\n\n                if (event.touches && event.touches.length > 1) return;\n                if (pinching || scale.value <= 1) return;\n\n                // Prevent dragging image out of viewport\n                if (scale.value > 1 && imageIsOutOfBounds(imageRef)) cancel();\n                else {\n                    if (first) {\n                        return {\n                            initialTranslateX: translateX.value,\n                            initialTranslateY: translateY.value\n                        };\n                    }\n\n                    // Translate image from dragging\n                    set({\n                        translateX: memo.initialTranslateX + xMovement,\n                        translateY: memo.initialTranslateY + yMovement\n                    });\n\n                    return memo;\n                }\n            }\n        },\n        /**\n         * useGesture config\n         * @see https://github.com/react-spring/react-use-gesture#usegesture-config\n         */\n        {\n            domTarget: imageRef,\n            event: {\n                passive: false\n            }\n        }\n    );\n\n    /**\n     * @see https://github.com/react-spring/react-use-gesture#adding-gestures-to-dom-nodes\n     */\n    useEffect(bind, [bind]);\n\n    // Handle click/tap on image\n    useDoubleClick({\n        [singleClickToZoom ? 'onSingleClick' : 'onDoubleClick']: e => {\n            if (pagerIsDragging || isPanningImage) {\n                e.stopPropagation();\n                return;\n            }\n\n            // If tapped while already zoomed-in, zoom out to default scale\n            if (scale.value !== 1) {\n                set(defaultImageTransform);\n                return;\n            }\n\n            // Zoom-in to origin of click on image\n            const { clientX: touchOriginX, clientY: touchOriginY } = e;\n            const pinchScale = scale.value + 1;\n            const pinchDelta = pinchScale - scale.value;\n\n            // Calculate the amount of x, y translate offset needed to\n            // zoom-in to point as image scale grows\n            const [newTranslateX, newTranslateY] = getTranslateOffsetsFromScale(\n                {\n                    imageRef,\n                    scale: scale.value,\n                    pinchDelta,\n                    currentTranslate: [translateX.value, translateY.value],\n                    touchOrigin: [touchOriginX, touchOriginY]\n                }\n            );\n\n            // Disable dragging in pager\n            setDisableDrag(true);\n            set({\n                scale: pinchScale,\n                translateX: newTranslateX,\n                translateY: newTranslateY,\n                pinching: true\n            });\n        },\n        ref: imageRef,\n        latency: singleClickToZoom ? 0 : 200\n    });\n\n    return (\n        <AnimatedImage\n            ref={imageRef}\n            className=\"lightbox-image\"\n            style={{\n                transform: to(\n                    [scale, translateX, translateY],\n                    (s, x, y) => `translate(${x}px, ${y}px) scale(${s})`\n                ),\n                maxHeight: pagerHeight,\n                ...(isCurrentImage && { willChange: 'transform' })\n            }}\n            src={src}\n            alt={alt}\n            draggable=\"false\"\n            onDragStart={e => {\n                // Disable image ghost dragging in firefox\n                e.preventDefault();\n            }}\n            onClick={e => {\n                // Don't close lighbox when clicking image\n                e.stopPropagation();\n                e.nativeEvent.stopImmediatePropagation();\n            }}\n        />\n    );\n};\n\nImage.propTypes = {\n    /* The source URL of this image */\n    src: PropTypes.string.isRequired,\n    /* The alt attribute for this image */\n    alt: PropTypes.string.isRequired,\n    /* True if this image is currently shown in pager, otherwise false */\n    isCurrentImage: PropTypes.bool.isRequired,\n    /* Function that can be called to disable dragging in the pager */\n    setDisableDrag: PropTypes.func.isRequired,\n    /* Fixed height of the image stage, used to restrict maximum height of images */\n    pagerHeight: PropTypes.number.isRequired,\n    /* Overrides the default behavior of double clicking causing an image zoom to a single click */\n    singleClickToZoom: PropTypes.bool.isRequired,\n    /* Indicates parent ImagePager is in a state of dragging, if true click to zoom is disabled */\n    pagerIsDragging: PropTypes.bool.isRequired\n};\n\nexport default Image;\n\nconst AnimatedImage = styled(animated.img)`\n    width: auto;\n    max-width: 100%;\n    user-select: none;\n    ::selection {\n        background: none;\n    }\n`;\n","import { useEffect } from 'react';\n\n/**\n * React Hook that returns the current window size\n * and report updates from the 'resize' window event\n *\n * @param {node} ref Dom node to watch for double clicks\n * @param {number} [latency=300] The amount of time (in milliseconds) to wait before differentiating a single from a double click\n * @param {function} onSingleClick A callback function for single click events\n * @param {function} onDoubleClick A callback function for double click events\n */\nconst useDoubleClick = ({\n    ref,\n    latency = 300,\n    onSingleClick = () => null,\n    onDoubleClick = () => null\n}) => {\n    useEffect(() => {\n        const clickRef = ref.current;\n        let clickCount = 0;\n        const handleClick = e => {\n            clickCount += 1;\n\n            setTimeout(() => {\n                if (clickCount === 1) onSingleClick(e);\n                else if (clickCount === 2) onDoubleClick(e);\n\n                clickCount = 0;\n            }, latency);\n        };\n\n        // Add event listener for click events\n        clickRef.addEventListener('click', handleClick);\n\n        // Remove event listener\n        return () => {\n            clickRef.removeEventListener('click', handleClick);\n        };\n    });\n};\n\nexport default useDoubleClick;\n","/* eslint-disable react/no-array-index-key */\nimport React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSprings, animated } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport styled from 'styled-components';\nimport { useWindowSize } from '../../utils';\nimport Image from '../Image';\n\n/**\n * Gesture controlled surface that animates prev/next page changes via spring physics.\n *\n * @param {array} images Array of image objects to be shown in Lightbox\n * @param {number} currentIndex Index of image in images array that is currently shown\n * @param {function} onPrev True if this image is currently shown in pager, otherwise false\n * @param {function} onNext Function that can be called to disable dragging in the pager\n * @param {function} onClose Function that closes the Lightbox\n * @param {function} renderImageOverlay A React component that renders inside the image stage, useful for making overlays over the image\n * @param {boolean} singleClickToZoom Overrides the default behavior of double clicking causing an image zoom to a single click\n *\n * @see https://github.com/react-spring/react-use-gesture\n * @see https://github.com/react-spring/react-spring\n */\nconst ImagePager = ({\n    images,\n    currentIndex,\n    onPrev,\n    onNext,\n    onClose,\n    renderImageOverlay,\n    singleClickToZoom\n}) => {\n    const firstRender = useRef(true);\n    const imageStageRef = useRef(\n        [...Array(images.length)].map(() => React.createRef())\n    );\n    const { height: windowHeight, width: pageWidth } = useWindowSize();\n    const [disableDrag, setDisableDrag] = useState(false);\n    const [pagerHeight, setPagerHeight] = useState('100%');\n    const [isDragging, setIsDragging] = useState(false);\n\n    // Generate page positions based on current index\n    const getPagePositions = (i, down = false, xDelta = 0) => {\n        const x = (i - currentIndex) * pageWidth + (down ? xDelta : 0);\n        if (i < currentIndex - 1 || i > currentIndex + 1)\n            return { x, display: 'none' };\n        return { x, display: 'flex' };\n    };\n\n    /**\n     * Animates translateX of all images at the same time\n     *\n     * @see https://www.react-spring.io/docs/hooks/use-springs\n     */\n    const [props, set] = useSprings(images.length, getPagePositions);\n\n    // Determine the absolute height of the image pager\n    useEffect(() => {\n        const currPagerHeight =\n            imageStageRef.current[currentIndex].current.clientHeight - 50;\n        if (pagerHeight !== currPagerHeight) setPagerHeight(currPagerHeight);\n    }, [currentIndex, pagerHeight, windowHeight]);\n\n    // Animate page change if currentIndex changes\n    useEffect(() => {\n        // No need to set page position for initial render\n        if (firstRender.current) {\n            firstRender.current = false;\n            return;\n        }\n\n        // Update page positions after prev/next page state change\n        set(getPagePositions);\n    });\n\n    /**\n     * Update each Image's visibility and translateX offset during dragging\n     *\n     * @see https://github.com/react-spring/react-use-gesture\n     */\n    const bind = useGesture(\n        {\n            onWheel: ({\n                distance,\n                velocity,\n                direction: [xDir, yDir],\n                ctrlKey\n            }) => {\n                // Disable drag if Image has been zoomed in to allow for panning\n                if (ctrlKey || disableDrag || velocity === 0) return;\n\n                const draggedFarEnough = distance > pageWidth / 3;\n                const draggedFastEnough =\n                    velocity > 1.5 && distance <= pageWidth / 3;\n\n                // Handle next/prev image from valid drag\n                if (draggedFarEnough || draggedFastEnough) {\n                    const goToIndex = xDir + yDir > 0 ? -1 : 1;\n\n                    if (goToIndex > 0) onNext();\n                    else if (goToIndex < 0) onPrev();\n                }\n            },\n            onWheelEnd: () => {\n                set(i => getPagePositions(i, false, 0));\n                setIsDragging(false);\n            },\n            onDrag: ({\n                down,\n                movement: [xMovement],\n                direction: [xDir],\n                velocity,\n                distance,\n                cancel,\n                touches\n            }) => {\n                // Disable drag if Image has been zoomed in to allow for panning\n                if (disableDrag || xMovement === 0) return;\n                if (!isDragging) setIsDragging(true);\n\n                const isHorizontalDrag = Math.abs(xDir) > 0.7;\n                const draggedFarEnough =\n                    down && isHorizontalDrag && distance > pageWidth / 3.5;\n                const draggedFastEnough =\n                    down && isHorizontalDrag && velocity > 2;\n\n                // Handle next/prev image from valid drag\n                if (draggedFarEnough || draggedFastEnough) {\n                    const goToIndex = xDir > 0 ? -1 : 1;\n\n                    // Cancel gesture animation\n                    cancel();\n\n                    if (goToIndex > 0) onNext();\n                    else if (goToIndex < 0) onPrev();\n                }\n\n                // Don't move pager during two+ finger touch events, i.e. pinch-zoom\n                if (touches > 1) return;\n\n                // Update page x-coordinates for single finger/mouse gestures\n                set(i => getPagePositions(i, down, xMovement));\n            },\n            onDragEnd: () => setIsDragging(false)\n        },\n        /**\n         * useGesture config\n         * @see https://github.com/react-spring/react-use-gesture#usegesture-config\n         */\n        {\n            domTarget: imageStageRef.current[currentIndex],\n            event: {\n                passive: true,\n                capture: false\n            }\n        }\n    );\n\n    /**\n     * @see https://github.com/react-spring/react-use-gesture#adding-gestures-to-dom-nodes\n     */\n    useEffect(bind, [bind, currentIndex]);\n    console.log(props);\n\n    return props.map(({ x, display }, i) => (\n        <AnimatedImagePager\n            role=\"presentation\"\n            ref={imageStageRef.current[i]}\n            key={i}\n            className=\"lightbox-image-pager\"\n            style={{\n                display,\n                transform: x.to(xInterp => `translateX(${xInterp}px)`)\n            }}\n            onClick={() => Math.abs(x.value) < 1 && !disableDrag && onClose()}\n        >\n            <PagerContentWrapper>\n                <PagerInnerContentWrapper>\n                    <ImageContainer\n                        onClick={e => {\n                            e.stopPropagation();\n                            e.nativeEvent.stopImmediatePropagation();\n                        }}\n                    >\n                        <Image\n                            setDisableDrag={setDisableDrag}\n                            src={images[i].src}\n                            alt={images[i].alt}\n                            pagerHeight={pagerHeight}\n                            isCurrentImage={i === currentIndex}\n                            pagerIsDragging={isDragging}\n                            singleClickToZoom={singleClickToZoom}\n                        />\n                        {renderImageOverlay()}\n                    </ImageContainer>\n                </PagerInnerContentWrapper>\n            </PagerContentWrapper>\n        </AnimatedImagePager>\n    ));\n};\n\nImagePager.propTypes = {\n    /* Function that closes the Lightbox */\n    onClose: PropTypes.func.isRequired,\n    /* Function that triggers ImagePager to move to the previous image */\n    onPrev: PropTypes.func.isRequired,\n    /* Function that triggers ImagePager to move to the next image */\n    onNext: PropTypes.func.isRequired,\n    /* Index of image in images array that is currently shown */\n    currentIndex: PropTypes.number.isRequired,\n    /* Array of images to be shown in Lightbox */\n    images: PropTypes.arrayOf(\n        PropTypes.shape({\n            /* The source URL of this image */\n            src: PropTypes.string.isRequired,\n            /* The alt attribute for this image */\n            alt: PropTypes.string.isRequired\n        })\n    ).isRequired,\n    /* A React component that renders inside the image stage, useful for making overlays over the image */\n    renderImageOverlay: PropTypes.func.isRequired,\n    /* Fixed height of the image stage, used to restrict maximum height of images */\n    pagerHeight: PropTypes.number.isRequired,\n    /* Overrides the default behavior of double clicking causing an image zoom to a single click */\n    singleClickToZoom: PropTypes.isRequired\n};\n\nexport default ImagePager;\n\nconst PagerInnerContentWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst PagerContentWrapper = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n`;\n\nconst AnimatedImagePager = styled(animated.div)`\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    bottom: 0px;\n    height: 100%;\n    width: 100%;\n    will-change: transform;\n    touch-action: none;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst ImageContainer = styled.div`\n    position: relative;\n    touch-action: none;\n    user-select: none;\n`;\n","import { useState, useEffect } from 'react';\n\n/**\n * React Hook that returns the current window size\n * and report updates from the 'resize' window event\n *\n * @typedef {WindowSize} WindowSize\n * @property {number} width Window width\n * @property {number} height Window height\n * @returns {WindowSize} An object container the window width and height\n */\nconst useWindowSize = () => {\n    const [windowSize, setWindowSize] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight\n    });\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (\n                window.innerHeight !== windowSize.height ||\n                window.innerWidth !== windowSize.width\n            ) {\n                setWindowSize({\n                    width: window.innerWidth,\n                    height: window.innerHeight\n                });\n            }\n        };\n\n        // Add event listener for window resize events\n        window.addEventListener('resize', handleResize);\n        window.addEventListener('orientationchange', handleResize);\n\n        // Remove event listener\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            window.addEventListener('orientationchange', handleResize);\n        };\n    });\n\n    return windowSize;\n};\n\nexport default useWindowSize;\n","/* eslint-disable no-shadow */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ImagePager from './components/ImagePager';\n\n/**\n * Containing element for ImagePager and prev/next button controls\n *\n * @param {array} images Array of image objects to be shown in Lightbox\n * @param {number} currentIndex Index of image in images array that is currently shown\n * @param {function} onPrev True if this image is currently shown in pager, otherwise false\n * @param {function} onNext Function that can be called to disable dragging in the pager\n * @param {function} renderPrevButton A React component that is used for previous button in image pager\n * @param {function} renderNextButton A React component that is used for next button in image pager\n * @param {function} renderImageOverlay A React component that renders inside the image stage, useful for making overlays over the image\n * @param {boolean} singleClickToZoom Overrides the default behavior of double clicking causing an image zoom to a single click\n */\nconst ImageStage = ({\n    images,\n    currentIndex,\n    onPrev,\n    onNext,\n    onClose,\n    renderPrevButton,\n    renderNextButton,\n    renderImageOverlay,\n    singleClickToZoom\n}) => {\n    // Extra sanity check that the next/prev image exists before moving to it\n    const canPrev = currentIndex > 0;\n    const canNext = currentIndex + 1 < images.length;\n\n    return (\n        <ImageStageContainer className=\"lightbox-image-stage\">\n            {renderPrevButton({ canPrev })}\n            <ImagePager\n                images={images}\n                currentIndex={currentIndex}\n                onClose={onClose}\n                onNext={onNext}\n                onPrev={onPrev}\n                renderImageOverlay={renderImageOverlay}\n                singleClickToZoom={singleClickToZoom}\n            />\n            {renderNextButton({ canNext })}\n        </ImageStageContainer>\n    );\n};\n\nImageStage.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onPrev: PropTypes.func.isRequired,\n    onNext: PropTypes.func.isRequired,\n    currentIndex: PropTypes.number.isRequired,\n    images: PropTypes.arrayOf(\n        PropTypes.shape({\n            src: PropTypes.string.isRequired,\n            caption: PropTypes.string.isRequired,\n            alt: PropTypes.string.isRequired,\n            width: PropTypes.number,\n            height: PropTypes.number\n        })\n    ).isRequired,\n    renderPrevButton: PropTypes.func.isRequired,\n    renderNextButton: PropTypes.func.isRequired,\n    renderImageOverlay: PropTypes.func.isRequired,\n    singleClickToZoom: PropTypes.isRequired\n};\n\nexport default ImageStage;\n\nconst ImageStageContainer = styled.div`\n    flex-grow: 1;\n    position: relative;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTransition, animated, config } from 'react-spring';\nimport styled from 'styled-components';\n\n/**\n * Animates the lightbox as it opens/closes\n *\n * @param {ReactNode} children All child components of Lightbox\n * @param {boolean} isOpen Flag that dictates if the lightbox is open or closed\n * @param {string} className Classes are applied to the root lightbox component\n * @param {object} style Inline styles are applied to the root lightbox component\n * @param {object} pageTransitionConfig React-Spring useTransition config for page open/close animation\n *\n * @see https://www.react-spring.io/docs/hooks/use-transition\n */\nconst PageContainer = ({\n    children,\n    isOpen,\n    className,\n    style,\n    pageTransitionConfig\n}) => {\n    const defaultTransition = {\n        from: { transform: 'scale(0.75)', opacity: 0 },\n        enter: { transform: 'scale(1)', opacity: 1 },\n        leave: { transform: 'scale(0.75)', opacity: 0 },\n        config: { ...config.default, mass: 1, tension: 320, friction: 32 }\n    };\n\n    const transition = useTransition(isOpen, {\n        ...defaultTransition,\n        ...pageTransitionConfig\n    });\n\n    return transition(\n        (transitionStyle, item) =>\n            item && (\n                <AnimatedPageContainer\n                    className={`lightbox-container${\n                        className ? ` ${className}` : ''\n                    }`}\n                    style={{ ...transitionStyle, ...style }}\n                >\n                    {children}\n                </AnimatedPageContainer>\n            )\n    );\n};\n\nPageContainer.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.element),\n        PropTypes.element\n    ]).isRequired,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    pageTransitionConfig: PropTypes.object\n};\n\nexport default PageContainer;\n\nconst AnimatedPageContainer = styled(animated.div)`\n    display: flex;\n    flex-direction: column;\n    position: fixed;\n    z-index: 400;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\n/**\n * Creates a SSR + next.js friendly React Portal inside <body />\n *\n * Child components are rendered on the client side only\n *\n * @param {array|node} children Child components will be rendered to the portal\n * @see https://reactjs.org/docs/portals.html\n */\nexport default class CreatePortal extends React.Component {\n    static propTypes = {\n        children: PropTypes.oneOfType([\n            PropTypes.arrayOf(PropTypes.element),\n            PropTypes.element\n        ]).isRequired\n    };\n\n    // Only executes on the client-side\n    componentDidMount() {\n        // Get the document body\n        this.body = document.body;\n\n        // Create a container <div /> for React Portal\n        this.portalContainer = document.createElement('div');\n        this.portalContainer.setAttribute('class', 'lightbox-portal');\n\n        // Append the container to the document body\n        this.body.appendChild(this.portalContainer);\n\n        // Force a re-render as we're on the client side now\n        // children prop will render to portalContainer\n        this.forceUpdate();\n\n        // Add event listener to prevent trackpad/ctrl+mousewheel zooming of lightbox\n        // Zooming is handled specifically within /ImageStage/components/Image\n        this.portalContainer.addEventListener('wheel', this.preventWheel);\n    }\n\n    componentWillUnmount() {\n        // Remove wheel event listener\n        this.portalContainer.removeEventListener('wheel', this.preventWheel);\n\n        // Cleanup Portal from DOM\n        this.body.removeChild(this.portalContainer);\n    }\n\n    preventWheel = e => e.preventDefault();\n\n    render() {\n        // Return null during SSR\n        if (this.portalContainer === undefined) return null;\n\n        const { children } = this.props;\n\n        return ReactDOM.createPortal(children, this.portalContainer);\n    }\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ImageStage, PageContainer, CreatePortal } from './components';\n\n/**\n * Gesture controlled lightbox that interpolates animations with spring physics.\n *\n * @param {boolean} isOpen Flag that dictates if the lightbox is open or closed\n * @param {function} onClose Function that closes the Lightbox\n * @param {function} onPrev Function that changes currentIndex to previous image in images\n * @param {function} onNext Function that changes currentIndex to next image in images\n * @param {number} currentIndex Index of image in images array that is currently shown\n * @param {function} renderHeader A React component that renders above the image pager\n * @param {function} renderFooter A React component that renders below the image pager\n * @param {function} renderImageOverlay A React component that renders inside the image stage, useful for making overlays over the image\n * @param {function} renderPrevButton A React component that is used for previous button in image pager\n * @param {function} renderNextButton A React component that is used for next button in image pager\n * @param {array} images Array of image objects to be shown in Lightbox\n * @param {string} className Classes are applied to the root lightbox component\n * @param {object} style Inline styles are applied to the root lightbox component\n * @param {object} pageTransitionConfig React-Spring useTransition config for page open/close animation\n * @param {boolean} singleClickToZoom Overrides the default behavior of double clicking causing an image zoom to a single click\n *\n * @see https://github.com/react-spring/react-use-gesture\n * @see https://github.com/react-spring/react-spring\n */\nconst Lightbox = ({\n    isOpen,\n    onClose,\n    images,\n    currentIndex,\n    onPrev,\n    onNext,\n    renderHeader,\n    renderFooter,\n    renderPrevButton,\n    renderNextButton,\n    renderImageOverlay,\n    className,\n    singleClickToZoom,\n    style,\n    pageTransitionConfig\n}) => {\n    // Handle event listeners for keyboard\n    useEffect(() => {\n        /**\n         * Prevent keyboard from controlling background page\n         * when lightbox is open\n         */\n        const preventBackgroundScroll = e => {\n            const keysToIgnore = [\n                'ArrowUp',\n                'ArrowDown',\n                'End',\n                'Home',\n                'PageUp',\n                'PageDown'\n            ];\n\n            if (isOpen && keysToIgnore.includes(e.key)) e.preventDefault();\n        };\n\n        /**\n         * Navigate images with arrow keys, close on Esc key\n         */\n        const handleKeyboardInput = e => {\n            if (isOpen) {\n                switch (e.key) {\n                    case 'ArrowLeft':\n                        onPrev();\n                        break;\n                    case 'ArrowRight':\n                        onNext();\n                        break;\n                    case 'Escape':\n                        onClose();\n                        break;\n                    default:\n                        e.preventDefault();\n                        break;\n                }\n            }\n        };\n\n        document.addEventListener('keyup', handleKeyboardInput);\n        document.addEventListener('keydown', preventBackgroundScroll);\n\n        return () => {\n            document.removeEventListener('keyup', handleKeyboardInput);\n            document.removeEventListener('keydown', preventBackgroundScroll);\n        };\n    });\n\n    return (\n        <CreatePortal>\n            <PageContainer\n                isOpen={isOpen}\n                className={className}\n                style={style}\n                pageTransitionConfig={pageTransitionConfig}\n            >\n                {renderHeader()}\n                <ImageStage\n                    images={images}\n                    onClose={onClose}\n                    currentIndex={currentIndex}\n                    onPrev={onPrev}\n                    onNext={onNext}\n                    renderPrevButton={renderPrevButton}\n                    renderNextButton={renderNextButton}\n                    renderImageOverlay={renderImageOverlay}\n                    singleClickToZoom={singleClickToZoom}\n                />\n                {renderFooter()}\n            </PageContainer>\n        </CreatePortal>\n    );\n};\n\nLightbox.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onPrev: PropTypes.func.isRequired,\n    onNext: PropTypes.func.isRequired,\n    currentIndex: PropTypes.number.isRequired,\n    images: PropTypes.arrayOf(\n        PropTypes.shape({\n            src: PropTypes.string.isRequired,\n            caption: PropTypes.string.isRequired,\n            alt: PropTypes.string.isRequired,\n            width: PropTypes.number,\n            height: PropTypes.number\n        })\n    ).isRequired,\n    renderHeader: PropTypes.func,\n    renderFooter: PropTypes.func,\n    renderPrevButton: PropTypes.func,\n    renderNextButton: PropTypes.func,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    pageTransitionConfig: PropTypes.object,\n    renderImageOverlay: PropTypes.func,\n    singleClickToZoom: PropTypes.bool\n};\n\nLightbox.defaultProps = {\n    pageTransitionConfig: null,\n    className: null,\n    style: null,\n    renderHeader: () => null,\n    renderFooter: () => null,\n    renderPrevButton: () => null,\n    renderNextButton: () => null,\n    renderImageOverlay: () => null,\n    singleClickToZoom: false\n};\n\nexport default Lightbox;\n"],"names":["getTranslateOffsetsFromScale","imageRef","scale","pinchDelta","touchOrigin","touchOriginX","touchOriginY","currentTranslate","translateX","translateY","current","getBoundingClientRect","imageTopLeftY","top","left","width","height","imageIsOutOfBounds","topLeftY","topLeftX","bottomRightY","bottom","bottomRightX","right","window","windowHeight","innerHeight","windowWidth","innerWidth","Image","src","alt","pagerHeight","isCurrentImage","setDisableDrag","singleClickToZoom","pagerIsDragging","useState","isPanningImage","setIsPanningImage","useRef","defaultImageTransform","config","precision","useSpring","onFrame","f","pinching","set","onRest","useEffect","bind","useGesture","onPinch","xMovement","movement","origin","event","ctrlKey","last","cancel","SCALE_FACTOR","pinchScale","value","clientX","clientY","newTranslateX","newTranslateY","onPinchEnd","onDragEnd","onDrag","yMovement","first","memo","initialTranslateX","initialTranslateY","touches","length","domTarget","passive","ref","latency","onSingleClick","onDoubleClick","clickRef","clickCount","handleClick","e","setTimeout","addEventListener","removeEventListener","useDoubleClick","stopPropagation","React","AnimatedImage","className","style","transform","to","s","x","y","maxHeight","willChange","draggable","onDragStart","preventDefault","onClick","nativeEvent","stopImmediatePropagation","styled","animated","img","ImagePager","images","currentIndex","onPrev","onNext","onClose","renderImageOverlay","firstRender","imageStageRef","_toConsumableArray","Array","map","createRef","windowSize","setWindowSize","handleResize","useWindowSize","pageWidth","disableDrag","setPagerHeight","isDragging","setIsDragging","getPagePositions","i","down","xDelta","display","useSprings","props","currPagerHeight","clientHeight","onWheel","distance","velocity","direction","xDir","yDir","goToIndex","onWheelEnd","isHorizontalDrag","Math","abs","capture","console","log","AnimatedImagePager","role","key","xInterp","PagerContentWrapper","PagerInnerContentWrapper","ImageContainer","div","ImageStage","renderPrevButton","renderNextButton","canPrev","canNext","ImageStageContainer","PageContainer","children","isOpen","pageTransitionConfig","defaultTransition","from","opacity","enter","leave","mass","tension","friction","useTransition","transition","transitionStyle","item","AnimatedPageContainer","CreatePortal","body","document","portalContainer","createElement","setAttribute","appendChild","this","forceUpdate","preventWheel","removeChild","undefined","ReactDOM","createPortal","Component","Lightbox","renderHeader","renderFooter","preventBackgroundScroll","includes","handleKeyboardInput","defaultProps"],"mappings":"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"}